# Experiment 1: Solving XOR using Deep Neural Network

from keras.models import Sequential
from keras.layers import Dense
import numpy as np
import matplotlib.pyplot as plt
X = np.array([[0,0], [0,1], [1,0], [1,1]])
Y = np.array([[0], [1], [1], [0]])
model = Sequential()
model.add(Dense(4, input_dim=2, activation='relu'))   # hidden layer
model.add(Dense(1, activation='sigmoid'))             # output layer

model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
`
history = model.fit(X, Y, epochs=1000, verbose=0)
loss, acc = model.evaluate(X, Y, verbose=0)
print(" DNN Model Accuracy:", round(acc, 4))

predictions = model.predict(X)
print("\nPredictions on XOR Inputs:")
for i in range(len(X)):
    print(f"Input: {X[i]} → Predicted: {round(float(predictions[i]),3)} | Expected: {Y[i][0]}")

plt.plot(history.history['loss'])
plt.title('Model Training Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.grid(True)
plt.show()

output:

DNN Model Accuracy: 1.0

Predictions on XOR Inputs:
Input: [0 0] → Predicted: 0.01 | Expected: 0
Input: [0 1] → Predicted: 0.98 | Expected: 1
Input: [1 0] → Predicted: 0.97 | Expected: 1
Input: [1 1] → Predicted: 0.02 | Expected: 0
